[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nmap <silent> <Space>ne :NERDTreeToggle<CR>
  nmap <silent> <Space>nc :NERDTreeFind<CR>
  " 隠しファイルを表示
  let NERDTreeShowHidden = 1
  " 表示幅
  let NERDTreeWinSize = 50
  " 表示フィルタ
  let NERDTreeIgnore = ['\.git$', '\.svn$', '\~$', '\.DS_Store']

  if !argc()
    autocmd vimenter * NERDTree|normal gg3j
  endif
  if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary")
    autocmd bufenter * q
  endif
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['scrooloose/nerdtree']

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)
nmap g/ <Plug>(easymotion-sn)
xmap g/ <Plug>(easymotion-sn)
omap g/ <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
let g:EasyMotion_startofline = 0
let g:EasyMotion_keys = 'QZASDFGHJKL;'
let g:EasyMotion_use_upper = 1
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
hi EasyMotionTarget guifg=#80a0ff ctermfg=81
'''

[[plugins]]
repo = 'kana/vim-smartword'
depends = ['kana/vim-submode']
hook_add = '''
  nmap w  <Plug>(smartword-w)
  vmap w  <Plug>(smartword-w)
  map  b  <Plug>(smartword-b)
  map  e  <Plug>(smartword-e)
  omap ge <Plug>(smartword-ge)
  call submode#enter_with('ge-mode', 'nv', 'r', 'ge', '<Plug>(smartword-ge)')
  call submode#map('ge-mode', 'nv', 'r', 'e', '<Plug>(smartword-ge)')
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  " undo/redo
  call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
  call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
  call submode#map('undo/redo', 'n', '', '+', 'g+')
  call submode#map('undo/redo', 'n', '', '-', 'g-')

  " move tab
  call submode#enter_with('tabmove', 'n', '', 'gt', 'gt')
  call submode#enter_with('tabmove', 'n', '', 'gT', 'gT')
  call submode#map('tabmove', 'n', '', 't', 'gt')
  call submode#map('tabmove', 'n', '', 'T', 'gT')

  " move window
  call submode#enter_with('windowmove', 'n', '', '<Space>ww', '<C-w>w')
  call submode#enter_with('windowmove', 'n', '', '<Space>Ww', '<C-w>w')
  call submode#enter_with('windowmove', 'n', '', '<Space>wW', '<C-w>W')
  call submode#enter_with('windowmove', 'n', '', '<Space>WW', '<C-w>W')
  call submode#map('windowmove', 'n', '', 'w', '<C-w>w')
  call submode#map('windowmove', 'n', '', 'W', '<C-w>W')

  " exchange window
  call submode#enter_with('windowex', 'n', '', '<Space>we', '<C-w>x')
  call submode#map('windowex', 'n', '', 'e', '<C-w>x')

  " resize window
  call submode#enter_with('windowresize', 'n', '', '<Space>wh', '<C-w><C-<>')
  call submode#enter_with('windowresize', 'n', '', '<Space>wl', '<C-w><C->>')
  call submode#enter_with('windowresize', 'n', '', '<Space>wk', '<C-w><C-+>')
  call submode#enter_with('windowresize', 'n', '', '<Space>wj', '<C-w><C-->')
  call submode#map('windowresize', 'n', '', 'h', '<C-w><C-<>')
  call submode#map('windowresize', 'n', '', 'l', '<C-w><C->>')
  call submode#map('windowresize', 'n', '', 'k', '<C-w><C-+>')
  call submode#map('windowresize', 'n', '', 'j', '<C-w><C-->')
'''

[[plugins]]
repo = 'tmhedberg/matchit'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  if !exists('g:context_filetype#filetypes')
    let g:context_filetype#filetypes = {}
  endif

  " dein.toml編集用
  let g:context_filetype#filetypes['toml'] = [
  \ {'filetype':'vim', 'start':'^\s*hook_\(add\|source\|post_source\)\s*=\s*'.'""'.'"', 'end':'""'.'"'},
  \ {'filetype':'vim', 'start':'^\s*hook_\(add\|source\|post_source\)\s*=\s*'."''"."'", 'end':"''"."'"},
  \ ]

  " styled-components編集用
  let g:context_filetype#filetypes['javascript'] = [
  \ {
  \   'start': 'styled.*`',
  \   'end':   '`;',
  \   'filetype': 'css',
  \ },
  \ ]

  " styled-jsx編集用
  let g:context_filetype#filetypes['javascript'] = [
  \ {
  \   'start': '<style jsx>.*`',
  \   'end':   '`}.*style',
  \   'filetype': 'css',
  \ },
  \ ]
'''

# Color
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
" au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'lilydjwg/colorizer'

[[plugins]]
repo = 'KabbAmine/vCoolor.vim'

[[plugins]]
repo = 'jonathanfilip/vim-lucius'
hook_add = '''
  au MyAutoCmd VimEnter * nested colorscheme lucius
'''

[[plugins]]
repo = 'tyrannicaltoucan/vim-deep-space'
hook_add = '''
  " set background=dark
  " set termguicolors
  " au MyAutoCmd VimEnter * nested colorscheme deep-space
'''

# Git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# Text
[[plugins]]
repo = 'tomtom/tcomment_vim'

# 検索補助、snake_case<->camelCase置き換え等
# :S/{pattern} で検索
# :S/{src}/{dst}/{flag} で置換
# cr[scmu-. ] でそれぞれsnake_case, camelCase, MixedCase, UPPER_CASE, dash-case, dot.case, space caseに置き換え
[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_leader_key = '<c-e>'
'''

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
nmap + :Switch<CR>
nmap - :Switch<CR>
'''

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  " Syntastic設定
  let g:syntastic_mode_map = {
    \  'mode': 'passive',
    \  'active_filetypes': ['ruby'],
    \}

  " エラー行に sign を表示
  let g:syntastic_enable_signs = 1
  " location list を常に表示
  let g:syntastic_auto_loc_list = 2

  " let g:syntastic_debug = 3

  let g:syntastic_javascript_checkers=['eslint']

  let g:syntastic_typescript_checkers = ['tslint']
  let g:syntastic_typescript_tslint_args = "--config ./tslint.json"
  " let g:syntastic_typescript_tsc_args = "--target ES5"
  " let g:syntastic_typescript_tsc_fname = ''

  " ruby
  let g:syntastic_ruby_checkers = ['rubocop']

  " stylelint
  let g:syntastic_css_checkers=['stylelint']
'''

[[plugins]]
repo = 'mtscout6/syntastic-local-eslint.vim'

[[plugins]]
repo = 'alessioalex/syntastic-local-tslint.vim'

# Status Line
# [[plugins]]
# repo = 'delphinus/lightline-delphinus'
# hook_add = '''
# let g:lightline_delphinus_use_powerline_glyphs = 1
# let g:lightline_delphinus_use_nerd_fonts_glyphs = 1
# let g:lightline_delphinus_colorscheme = 'nord_improved'
# '''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'landscape',
        \ 'active': {
        \   'left': [ ['mode', 'paste'], ['filename', 'fugitive'] ],
        \   'right': [ ['syntastic', 'lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype'] ]
        \ },
        \ 'component': {
        \   'readonly': '%{&readonly?"\ue0a2":""}',
        \ },
        \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2"},
        \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3"},
        \ 'component_function': {
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFileName',
        \   'fileformat': 'MyFileFormat',
        \   'fileencoding': 'MyFileEncoding',
        \   'filetype': 'MyFileType'
        \ },
        \ 'component_expand': {
        \   'syntastic': 'SyntasticStatuslineFlag',
        \ },
        \ 'component_type': {
        \   'syntastic': 'error',
        \ }
        \ }
  function! MyFugitive()
    try
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head') && strlen(fugitive#head()) && winwidth(0) > 100
        return "\ue0a0" . ' ' . fugitive#head()
      endif
    catch
    endtry
    return ''
  endfunction

  function! MyModified()
    return &ft =~ 'help\|vimfiler\|gundo\|nerdtree' ? '' : &modified ? '+' : &modifiable ? '' : "\ue0a2"
  endfunction

  function! MyFileName()
    return &ft =~ 'nerdtree' ? '-' : expand('%:t') . ' ' . MyModified()
  endfunction

  function! MyFileFormat()
    return &ft =~ 'nerdtree' || winwidth(0) <= 100 ? '' : &fileformat
  endfunction

  function! MyFileEncoding()
    return &ft =~ 'nerdtree' || winwidth(0) <= 100 ? '' : ( strlen( &fenc ) ? &fenc : &enc )
  endfunction

  function! MyFileType()
    return &ft =~ 'nerdtree' || winwidth(0) <= 100 ? '' : ( strlen( &filetype ) ? &filetype : 'no ft' )
  endfunction

  augroup AutoSyntastic
    autocmd!
    autocmd BufWritePost *.js call s:syntastic()
    autocmd BufWritePost *.ts call s:syntastic()
  augroup END

  function! s:syntastic()
    SyntasticCheck
    call lightline#update()
  endfunction
'''

# [[plugins]]
# repo = 'ryanoasis/vim-devicons'
#
# [[plugins]]
# repo = 'w0rp/ale'
# hook_add = '''
#   let g:ale_echo_msg_format = '%severity%: %linter%: %s'
#   let g:ale_sign_column_always = 1
#   let g:ale_sign_error = ' '
#   let g:ale_sign_warning = ' '
#   let g:ale_statusline_format = ['  %d', '  %d', '  ']
#   let g:ale_linters = {
#         \ 'go': [ 'vet', 'golint'],
#         \ 'typescript': [ 'tslint', 'tsserver' ],
#         \ }
#   let g:ale_sh_shellcheck_options = '-x'
# '''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'hotwatermorning/auto-git-diff'

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
let g:expand_region_text_objects_html = {
      \ 'i"' :0,
      \ 'i<' :0,
      \ 'it' :1,
      \ }

" vv...で選択範囲の拡張
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
'''

